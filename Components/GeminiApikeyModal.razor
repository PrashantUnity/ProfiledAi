@using ProfiledAi.Models
@using ProfiledAi.Models.CacheModel
@using ProfiledAi.Services
@using ProfiledAi.Utils
<div class="modal fade" id="@_model.ModelId" tabindex="-1" aria-labelledby="@_model.AriaLabelledby" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content whatsapp-modal">
            <div class="modal-header">
                <h5 class="modal-title" id="@_model.AriaLabelledby">@_model.HeaderTitle</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="whatsappForm">
                    <div class="mb-3">
                        <input type="password" class="form-control" id="messageInput" @bind-value="@_apiKey" placeholder="@_model.PlaceHolder" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer justify-content-end">
                <button type="submit" class="btn btn-primary" @onclick="SaveApiKey">Save</button>
            </div>
        </div>
    </div>
</div>
@code{
    [Inject] public LocalStorageCaching LocalStorageCaching { get; set; } = null!;
    private readonly PopUpModel _model = Constant.GetGeminiApiKeyInputModel();
    private string _apiKey = Constant.ApiKey;
    private async Task SaveApiKey()
    {
        if (string.IsNullOrWhiteSpace(_apiKey))
        {
            return;
        }
        Constant.ApiKey = _apiKey;
        var geminiApiKeyCache = new GeminiApiKeyCacheModel
        {
            ApiKey = _apiKey,
        };
        await LocalStorageCaching.SetApiKeyAsync(GeminiApiKeyCacheModel.GeminiApiKeyCache, geminiApiKeyCache);
    }
}